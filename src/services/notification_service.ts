import { Notifications, Notification, NotificationResponse } from 'react-native-notifications';
import { NotificationCompletion } from 'react-native-notifications/lib/dist/interfaces/NotificationCompletion';
import { Platform } from 'react-native';

const push = (): void => {
	// const upvoteAction = new NotificationAction('background', String.fromCodePoint(0x1f44d), 'UPVOTE_ACTION');

	// const replyAction = new NotificationAction({
	// 	activationMode: 'background',
	// 	title: 'Reply',
	// 	authenticationRequired: true,
	// 	identifier: 'REPLY_ACTION',
	// });

	const id = Math.random();
	Notifications.postLocalNotification(
		{
			title: 'Local notification',
			body: 'This notification was generated by the app!',
			payload: 'data',
			sound: 'chime.aiff',
			badge: 1,
			thread: '',
			type: '',
			identifier: 'com.duyanhv.rnsimplifystarterkit',
		},
		id,
	);
};

const initialize = async (): Promise<void> => {
	// Notifications.registerRemoteNotifications();
	Notifications.events().registerNotificationReceivedForeground((_notification: Notification, completion) => {
		// console.log(`Notification received in foreground: ${notification.title} : ${notification.body}`);
		completion({
			alert: true,
			sound: false,
			badge: true,
		});
	});

	Notifications.events().registerNotificationOpened((_notification: NotificationResponse, completion) => {
		// console.log(`Notification opened: ${notification.payload}`);
		completion();
	});
	Notifications.events().registerNotificationReceivedBackground(
		(_notification: Notification, completion: (response: NotificationCompletion) => void) => {
			// console.log('Notification Received - Background', notification.payload);

			// Calling completion on iOS with `alert: true` will present the native iOS inApp notification.
			completion({
				alert: true,
				sound: true,
				badge: false,
			});
		},
	);

	if (Platform.OS === 'ios') {
		await Notifications.ios.checkPermissions();
	}
};
export const notificationService = {
	initialize,
	push,
};
